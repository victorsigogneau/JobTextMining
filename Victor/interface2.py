import sqlite3
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Fonction pour cr√©er un nuage de mots avec une condition sur contratId
def generer_nuage_de_mots_pour_metier(contrat_id):
    # Ajoutez le code pour g√©n√©rer un nuage de mots avec des donn√©es fictives pour le contrat_id sp√©cifi√©
    wordcloud_data = {'Python': 10, 'Java': 8, 'JavaScript': 6}
    wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(wordcloud_data)

    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    return plt

# Fonction pour cr√©er une carte fictive de la France avec une condition sur contratId
def generer_carte_france_pour_metier(contrat_id):
    # Ajoutez le code pour g√©n√©rer une carte fictive de la France avec des donn√©es fictives pour le contrat_id sp√©cifi√©
    france_data = pd.DataFrame({
        'R√©gion': ['√éle-de-France', 'Auvergne-Rh√¥ne-Alpes', 'Provence-Alpes-C√¥te d\'Azur', 'Occitanie', 'Hauts-de-France'],
        'Valeur': [100, 80, 60, 40, 20]
    })
    fig_france = px.choropleth(france_data, 
                               locations='R√©gion',
                               locationmode='country names',
                               color='Valeur',
                               color_continuous_scale='Viridis')
    return fig_france

# Fonction pour cr√©er un Barplot avec une condition sur contratId
def generer_barplot_diplome_pour_metier(contrat_id):
    # Ajoutez le code pour g√©n√©rer un Barplot avec des donn√©es fictives pour le contrat_id sp√©cifi√©
    data_barplot = pd.DataFrame({
        'Langage': ['Python', 'Java', 'JavaScript', 'C#', 'Ruby'],
        'Popularit√©': [30, 25, 20, 15, 10]
    })

    # Cr√©ation du Barplot avec Plotly Express
    fig_barplot = px.bar(data_barplot, x='Langage', y='Popularit√©', title=f'Popularit√© des dipl√¥mes pour le m√©tier de : {contrat_id}', color_discrete_sequence=['#FF4B4B'])

    # Affichage du Barplot
    return fig_barplot

# Fonction pour calculer le nombre d'entreprises avec une condition sur contratId
def calculer_nombre_entreprises_pour_metier(contrat_id, date_filtre):
    conn = sqlite3.connect('job_mining2.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT COUNT(DISTINCT entrepriseId) FROM OffresEmploi_Faits WHERE contratId = '{contrat_id}' AND strftime('%Y', dateCreation) = '{date_filtre}';")
    nombre_entreprises = cursor.fetchone()[0]
    conn.close()
    return nombre_entreprises

# Fonction pour calculer le nombre de villes avec une condition sur contratId
def calculer_nombre_villes_pour_metier(contrat_id, date_filtre):
    conn = sqlite3.connect('job_mining2.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT COUNT(DISTINCT lieuTravailId) FROM OffresEmploi_Faits WHERE contratId = '{contrat_id}' AND strftime('%Y', dateCreation) = '{date_filtre}';")
    nombre_villes = cursor.fetchone()[0]
    conn.close()
    return nombre_villes

# Fonction pour calculer le nombre d'offres avec une condition sur contratId
def calculer_nombre_offres_pour_metier(contrat_id, date_filtre):
    conn = sqlite3.connect('job_mining2.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT COUNT(*) FROM OffresEmploi_Faits WHERE contratId = '{contrat_id}' AND strftime('%Y', dateCreation) = '{date_filtre}';")

    nombre_offres = cursor.fetchone()[0]
    conn.close()
    return nombre_offres

# Fonction pour calculer l'√©volution d'offre par ann√©e en pourcentage avec une condition sur contratId
def calculer_evolution_offres_pour_metier(contrat_id, date_filtre):
    conn = sqlite3.connect('job_mining2.db')
    cursor = conn.cursor()
    
    # Requ√™te SQL pour obtenir le nombre d'offres cr√©√©es en 2022 pour le contrat_id sp√©cifi√©
    cursor.execute(f"SELECT COUNT(id) FROM OffresEmploi_Faits WHERE contratId = '{contrat_id}' AND dateCreation BETWEEN '2022-01-01' AND '2022-12-31' AND strftime('%Y', dateCreation) = '{date_filtre}';")
    offres_2022 = cursor.fetchone()[0]
    
    # Requ√™te SQL pour obtenir le nombre d'offres cr√©√©es en 2023 pour le contrat_id sp√©cifi√©
    cursor.execute(f"SELECT COUNT(id) FROM OffresEmploi_Faits WHERE contratId = '{contrat_id}' AND dateCreation BETWEEN '2023-01-01' AND '2023-12-31' AND dateCreation <= '{date_filtre}';")
    offres_2023 = cursor.fetchone()[0]
    
    conn.close()
    
    # Calcul de l'√©volution en pourcentage
    if offres_2022 == 0:
        return 0  # √âviter une division par z√©ro
    else:
        evolution = ((offres_2023 - offres_2022) / offres_2022) * 100
        return round(evolution, 2)

#############
# STREAMLIT #
#############

# CSS input
st.markdown(
"""
<style>
    input[type="text"] {
        color: #FF4B4B !important;
        font-weight: bold !important;
        font-size: larger !important;
        text-align: left !important;
    }
</style>
""",
unsafe_allow_html=True
)

# CSS subheader
st.markdown(
    """
    <style>
        div.stMarkdown.stSubheader {
            text-align: center !important;
        }
    </style>
    """,
    unsafe_allow_html=True
)

# Filtres
st.sidebar.title("Filtres")
# Ann√©e
selected_year = st.sidebar.slider("Ann√©e :", min_value=2018, max_value=2024, value=2024)
#R√©gions (requete SQL plus tard)
regions_france = ["Toute la France","Auvergne-Rh√¥ne-Alpes", "Bourgogne-Franche-Comt√©", "Bretagne", "Centre-Val de Loire", "Corse", "Grand Est", "Hauts-de-France", "√éle-de-France", "Normandie", "Nouvelle-Aquitaine", "Occitanie", "Pays de la Loire", "Provence-Alpes-C√¥te d'Azur"]
# S√©lection de la r√©gion dans la barre lat√©rale
selected_region = st.sidebar.selectbox("R√©gion", regions_france)

# Page principale
selected_page="Accueil"

# Affichage du contenu 
if selected_page == "Accueil":
    st.title("JobAPP : Mieux comprendre")
    st.write("Cette application a pour objectif de fournir une compr√©hension approfondie des comp√©tences demand√©es sur le march√© de l'emploi en se basant sur les offres provenant de sites d'emploi renomm√©s tels que P√¥le Emploi et l'APEC. En explorant les donn√©es extraites de ces sources, les utilisateurs pourront analyser les tendances du march√©, visualiser les diff√©rentes comp√©tences recherch√©es, et obtenir des insights pr√©cieux pour orienter leurs choix professionnels. Que ce soit pour les demandeurs d'emploi cherchant √† affiner leurs comp√©tences ou les professionnels souhaitant rester inform√©s des √©volutions du march√© du travail, cette application offre une plateforme interactive pour explorer et interpr√©ter les donn√©es li√©es √† l'emploi.")


# Champ de saisie de texte
    st.subheader(f"Quel m√©tier voulez-vous connaitre?")
    recherche_metier = st.text_input("", value='', key='recherche_metier')
    st.markdown('<style>div.Widget.row-widget.stRadio > div{flex-direction:row;}</style>', unsafe_allow_html=True)
    st.markdown('<style>div.Widget.row-widget.stRadio > div > label{background-color: #FF0000;color:#FFFFFF;}</style>', unsafe_allow_html=True)

    # V√©rification si un m√©tier est saisi
    if recherche_metier:
        # G√©n√©ration des graphiques et KPI
        st.title(f"Le m√©tier de {recherche_metier}")

        # Affichage des KPI
        st.markdown(
            f"<style>"
            f"div {{ font-family: 'Segoe UI Emoji', sans-serif; }}"
            f"</style>"
            f"<div style='display:flex; justify-content: space-between;'>"
            f"<div style='border: 2px solid white; padding:10px; border-radius:10px; margin-right: 10px; text-align: center;'>"
            f"<strong style='color:#FF4B4B;'>Nombre d'offres :</strong><br>"
            f"{calculer_nombre_offres_pour_metier(recherche_metier, selected_year)}üìë"
            f"</div>"
            f"<div style='border: 2px solid white; padding:10px; border-radius:10px; margin-right: 10px; text-align: center;'>"
            f"<strong style='color:#FF4B4B;'>Nombre d'entreprises :</strong><br>"
            f"{calculer_nombre_entreprises_pour_metier(recherche_metier, selected_year)}üè≠"
            f"</div>"
            f"<div style='border: 2px solid white; padding:10px; border-radius:10px; text-align: center;'>"
            f"<strong style='color:#FF4B4B;'>Nombre de villes :</strong><br>"
            f"{calculer_nombre_villes_pour_metier(recherche_metier, selected_year)}üó∫Ô∏è"
            f"</div>"
            f"</div>"
            f"<br>",
            unsafe_allow_html=True
        )

        # Exemple de Nuage de mots pour le m√©tier saisi
        st.subheader(f"Quelle comp√©tences avoir ?")
        nuage_de_mots_metier = generer_nuage_de_mots_pour_metier(recherche_metier)
        st.pyplot(nuage_de_mots_metier)

        # Exemple de Carte fictive de la France pour le m√©tier saisi
        st.subheader(f"Dans quel secteur ?")
        st.write(f"On peut voir que la r√©gion de <requete ou il y a le moins> est d√©serte pour le m√©tier de {recherche_metier} mais la r√©gion <requete ou il y en a le plus> la moyenne g√©n√©rale en france est de <requete moyenne offre region>.")
        carte_france_metier = generer_carte_france_pour_metier(recherche_metier)
        st.plotly_chart(carte_france_metier)

        # Exemple de Barplot fictif pour le m√©tier saisi
        st.subheader(f"Quel dipl√¥me ?")
        barplot_fig_metier = generer_barplot_diplome_pour_metier(recherche_metier)
        st.plotly_chart(barplot_fig_metier)


